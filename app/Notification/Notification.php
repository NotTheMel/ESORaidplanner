<?php
/**
 * Created by PhpStorm.
 * User: woeler
 * Date: 13.10.18
 * Time: 13:02.
 */

namespace App\Notification;

use App\Notification\Message\AbstractNotificationMessage;
use App\Notification\Message\TestMessage;
use App\Notification\System\AbstractNotificationSystem;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;

class Notification extends Model
{
    protected $table = 'hooks';

    /**
     * @var AbstractNotificationSystem
     */
    protected $system;

    /**
     * @var AbstractNotificationMessage
     */
    protected $messageObj;

    /**
     * @var array
     */
    protected $subjects;

    protected $fillable = [
        'name',
        'type',
        'token',
        'chat_id',
        'url',
        'call_time_diff',
        'signup_count',
        'message',
        'guild_id',
        'call_type',
        'if_less_signups',
        'tags',
        'if_more_signups',
        'has_embeds',
    ];

    public function delete()
    {
        DB::table('hookcalls')
            ->where('hook_id', '=', $this->id)
            ->delete();

        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function tags(): array
    {
        return json_decode($this->tags, true) ?? [];
    }

    public function timezones(): array
    {
        return json_decode($this->timezones, true) ?? [];
    }

    public function hasEmbeds(): bool
    {
        return 1 === $this->has_embeds;
    }

    public function send(array $subjects)
    {
        $this->subjects = $subjects;
        $this->setMessage();
        if (!$this->messageObj->meetsSendingConditions($this)) {
            return;
        }
        $this->setSystem();
        $this->system->send($this);
        if ($this->messageObj->isTimed()) {
            $this->messageObj->wasCalled($this);
        }
    }

    public function getMessageTypeConfig(): array
    {
        $class = Configuration::MESSAGE_TYPES[$this->call_type];

        return $class::CONFIG;
    }

    public function getSystemName(): string
    {
        $class = Configuration::SYSTEM_TYPES[$this->type];

        return $class::NAME;
    }

    public function sendTest()
    {
        $this->messageObj = new TestMessage($this->name, $this);
        $this->setSystem();
        $this->system->send($this);
    }

    public function setTagsFromString(string $tags)
    {
        if (empty($tags)) {
            $this->tags = '[]';

            return;
        }
        $tags_arr = explode(',', $tags);
        foreach ($tags_arr as &$tag) {
            $tag = trim($tag);
        }

        $this->tags = json_encode($tags_arr);
    }

    public function setDailyTriggerTime(string $time, string $timezone = 'UTC')
    {
        $dt = new \DateTime(date('Y-m-d').' '.$time, new \DateTimeZone($timezone));
        $dt->setTimezone(new \DateTimeZone(env('DEFAULT_TIMEZONE')));

        $this->daily_trigger_time = $dt->format('H:i');
    }

    public function getDailyTriggerTime(string $timezone = 'UTC'): \DateTime
    {
        $dt = new \DateTime(date('Y-m-d').' '.$this->daily_trigger_time.':00', new \DateTimeZone(env('DEFAULT_TIMEZONE')));
        $dt->setTimezone(new \DateTimeZone($timezone));

        return $dt;
    }

    private function setSystem()
    {
        $class = Configuration::SYSTEM_TYPES[$this->type];

        $this->system =  new $class($this->messageObj);
    }

    private function setMessage()
    {
        $class = Configuration::MESSAGE_TYPES[$this->call_type];

        $this->messageObj =  new $class($this->message ?? '', $this, $this->subjects);
    }
}
